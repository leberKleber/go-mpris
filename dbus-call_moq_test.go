// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mpris

import (
	"sync"
)

// Ensure, that dbusCallMock does implement dbusCall.
// If this is not the case, regenerate this file with moq.
var _ dbusCall = &dbusCallMock{}

// dbusCallMock is a mock implementation of dbusCall.
//
// 	func TestSomethingThatUsesdbusCall(t *testing.T) {
//
// 		// make and configure a mocked dbusCall
// 		mockeddbusCall := &dbusCallMock{
// 			StoreFunc: func(retvalues ...interface{}) error {
// 				panic("mock out the Store method")
// 			},
// 		}
//
// 		// use mockeddbusCall in code that requires dbusCall
// 		// and then make assertions.
//
// 	}
type dbusCallMock struct {
	// StoreFunc mocks the Store method.
	StoreFunc func(retvalues ...interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Store holds details about calls to the Store method.
		Store []struct {
			// Retvalues is the retvalues argument value.
			Retvalues []interface{}
		}
	}
	lockStore sync.RWMutex
}

// Store calls StoreFunc.
func (mock *dbusCallMock) Store(retvalues ...interface{}) error {
	if mock.StoreFunc == nil {
		panic("dbusCallMock.StoreFunc: method is nil but dbusCall.Store was just called")
	}
	callInfo := struct {
		Retvalues []interface{}
	}{
		Retvalues: retvalues,
	}
	mock.lockStore.Lock()
	mock.calls.Store = append(mock.calls.Store, callInfo)
	mock.lockStore.Unlock()
	return mock.StoreFunc(retvalues...)
}

// StoreCalls gets all the calls that were made to Store.
// Check the length with:
//     len(mockeddbusCall.StoreCalls())
func (mock *dbusCallMock) StoreCalls() []struct {
	Retvalues []interface{}
} {
	var calls []struct {
		Retvalues []interface{}
	}
	mock.lockStore.RLock()
	calls = mock.calls.Store
	mock.lockStore.RUnlock()
	return calls
}
