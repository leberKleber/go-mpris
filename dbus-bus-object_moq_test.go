// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mpris

import (
	"github.com/godbus/dbus/v5"
	"sync"
)

var (
	lockdbusBusObjectMockCall        sync.RWMutex
	lockdbusBusObjectMockGetProperty sync.RWMutex
)

// Ensure, that dbusBusObjectMock does implement dbusBusObject.
// If this is not the case, regenerate this file with moq.
var _ dbusBusObject = &dbusBusObjectMock{}

// dbusBusObjectMock is a mock implementation of dbusBusObject.
//
//     func TestSomethingThatUsesdbusBusObject(t *testing.T) {
//
//         // make and configure a mocked dbusBusObject
//         mockeddbusBusObject := &dbusBusObjectMock{
//             CallFunc: func(method string, flags dbus.Flags, args ...interface{}) dbusCall {
// 	               panic("mock out the Call method")
//             },
//             GetPropertyFunc: func(p string) (dbus.Variant, error) {
// 	               panic("mock out the GetProperty method")
//             },
//         }
//
//         // use mockeddbusBusObject in code that requires dbusBusObject
//         // and then make assertions.
//
//     }
type dbusBusObjectMock struct {
	// CallFunc mocks the Call method.
	CallFunc func(method string, flags dbus.Flags, args ...interface{}) dbusCall

	// GetPropertyFunc mocks the GetProperty method.
	GetPropertyFunc func(p string) (dbus.Variant, error)

	// calls tracks calls to the methods.
	calls struct {
		// Call holds details about calls to the Call method.
		Call []struct {
			// Method is the method argument value.
			Method string
			// Flags is the flags argument value.
			Flags dbus.Flags
			// Args is the args argument value.
			Args []interface{}
		}
		// GetProperty holds details about calls to the GetProperty method.
		GetProperty []struct {
			// P is the p argument value.
			P string
		}
	}
}

// Call calls CallFunc.
func (mock *dbusBusObjectMock) Call(method string, flags dbus.Flags, args ...interface{}) dbusCall {
	if mock.CallFunc == nil {
		panic("dbusBusObjectMock.CallFunc: method is nil but dbusBusObject.Call was just called")
	}
	callInfo := struct {
		Method string
		Flags  dbus.Flags
		Args   []interface{}
	}{
		Method: method,
		Flags:  flags,
		Args:   args,
	}
	lockdbusBusObjectMockCall.Lock()
	mock.calls.Call = append(mock.calls.Call, callInfo)
	lockdbusBusObjectMockCall.Unlock()
	return mock.CallFunc(method, flags, args...)
}

// CallCalls gets all the calls that were made to Call.
// Check the length with:
//     len(mockeddbusBusObject.CallCalls())
func (mock *dbusBusObjectMock) CallCalls() []struct {
	Method string
	Flags  dbus.Flags
	Args   []interface{}
} {
	var calls []struct {
		Method string
		Flags  dbus.Flags
		Args   []interface{}
	}
	lockdbusBusObjectMockCall.RLock()
	calls = mock.calls.Call
	lockdbusBusObjectMockCall.RUnlock()
	return calls
}

// GetProperty calls GetPropertyFunc.
func (mock *dbusBusObjectMock) GetProperty(p string) (dbus.Variant, error) {
	if mock.GetPropertyFunc == nil {
		panic("dbusBusObjectMock.GetPropertyFunc: method is nil but dbusBusObject.GetProperty was just called")
	}
	callInfo := struct {
		P string
	}{
		P: p,
	}
	lockdbusBusObjectMockGetProperty.Lock()
	mock.calls.GetProperty = append(mock.calls.GetProperty, callInfo)
	lockdbusBusObjectMockGetProperty.Unlock()
	return mock.GetPropertyFunc(p)
}

// GetPropertyCalls gets all the calls that were made to GetProperty.
// Check the length with:
//     len(mockeddbusBusObject.GetPropertyCalls())
func (mock *dbusBusObjectMock) GetPropertyCalls() []struct {
	P string
} {
	var calls []struct {
		P string
	}
	lockdbusBusObjectMockGetProperty.RLock()
	calls = mock.calls.GetProperty
	lockdbusBusObjectMockGetProperty.RUnlock()
	return calls
}
